1. Behavioral Design Patterns
Use Case 1: Observer Pattern
Scenario: A weather monitoring system where multiple displays need to be updated whenever the weather data changes.



import java.util.ArrayList;
import java.util.List;

// Observer Interface
interface Observer {
    void update(float temperature);
}

// Subject
class WeatherStation {
    private List<Observer> observers = new ArrayList<>();
    private float temperature;

    public void addObserver(Observer observer) {
        observers.add(observer);
    }

    public void removeObserver(Observer observer) {
        observers.remove(observer);
    }

    public void setTemperature(float temperature) {
        this.temperature = temperature;
        notifyObservers();
    }

    private void notifyObservers() {
        for (Observer observer : observers) {
            observer.update(temperature);
        }
    }
}

// Concrete Observer
class PhoneApp implements Observer {
    @Override
    public void update(float temperature) {
        System.out.println("PhoneApp: The current temperature is " + temperature + "°C");
    }
}

// Concrete Observer
class WeatherDisplay implements Observer {
    @Override
    public void update(float temperature) {
        System.out.println("WeatherDisplay: The current temperature is " + temperature + "°C");
    }
}

// Usage
public class ObserverPatternExample {
    public static void main(String[] args) {
        WeatherStation weatherStation = new WeatherStation();
        PhoneApp phoneApp = new PhoneApp();
        WeatherDisplay weatherDisplay = new WeatherDisplay();

        weatherStation.addObserver(phoneApp);
        weatherStation.addObserver(weatherDisplay);

        weatherStation.setTemperature(23.5f);
    }
}
Use Case 2: Strategy Pattern
Scenario: A navigation system where users can choose different strategies for routing: shortest path, scenic route, or fastest route.





// Strategy Interface
interface RouteStrategy {
    String route(String start, String end);
}

// Concrete Strategies
class ShortestRoute implements RouteStrategy {
    @Override
    public String route(String start, String end) {
        return "Shortest route from " + start + " to " + end;
    }
}

class ScenicRoute implements RouteStrategy {
    @Override
    public String route(String start, String end) {
        return "Scenic route from " + start + " to " + end;
    }
}

class FastestRoute implements RouteStrategy {
    @Override
    public String route(String start, String end) {
        return "Fastest route from " + start + " to " + end;
    }
}

// Context
class NavigationSystem {
    private RouteStrategy strategy;

    public NavigationSystem(RouteStrategy strategy) {
        this.strategy = strategy;
    }

    public void setStrategy(RouteStrategy strategy) {
        this.strategy = strategy;
    }

    public String navigate(String start, String end) {
        return strategy.route(start, end);
    }
}

// Usage
public class StrategyPatternExample {
    public static void main(String[] args) {
        NavigationSystem navigation = new NavigationSystem(new ShortestRoute());
        System.out.println(navigation.navigate("A", "B"));

        navigation.setStrategy(new ScenicRoute());
        System.out.println(navigation.navigate("A", "B"));

        navigation.setStrategy(new FastestRoute());
        System.out.println(navigation.navigate("A", "B"));
    }
}




2. Creational Design Patterns
Use Case 1: Singleton Pattern
Scenario: Implement a logging system where only one instance of the logger is used throughout the application.



// Singleton Logger
public class SingletonLogger {
    private static SingletonLogger instance;
    private List<String> log = new ArrayList<>();

    private SingletonLogger() {}

    public static synchronized SingletonLogger getInstance() {
        if (instance == null) {
            instance = new SingletonLogger();
        }
        return instance;
    }

    public void log(String message) {
        log.add(message);
        System.out.println("Log: " + message);
    }

    public List<String> getLogs() {
        return log;
    }
}

// Usage
public class SingletonPatternExample {
    public static void main(String[] args) {
        SingletonLogger logger1 = SingletonLogger.getInstance();
        SingletonLogger logger2 = SingletonLogger.getInstance();

        logger1.log("This is a log entry.");
        System.out.println(logger2.getLogs()); // Should contain the same log entry

        System.out.println(logger1 == logger2); // Should be true, confirming both are the same instance
    }
}



Use Case 2: Factory Method Pattern
Scenario: Create different types of documents (PDF, Word) using a document creation factory.





// Document Interface
interface Document {
    String create();
}

// Concrete Documents
class PDFDocument implements Document {
    @Override
    public String create() {
        return "PDF Document created";
    }
}

class WordDocument implements Document {
    @Override
    public String create() {
        return "Word Document created";
    }
}

// Factory Interface
interface DocumentFactory {
    Document createDocument();
}

// Concrete Factories
class PDFDocumentFactory implements DocumentFactory {
    @Override
    public Document createDocument() {
        return new PDFDocument();
    }
}

class WordDocumentFactory implements DocumentFactory {
    @Override
    public Document createDocument() {
        return new WordDocument();
    }
}

// Usage
public class FactoryMethodPatternExample {
    public static void main(String[] args) {
        DocumentFactory pdfFactory = new PDFDocumentFactory();
        DocumentFactory wordFactory = new WordDocumentFactory();

        System.out.println(pdfFactory.createDocument().create());
        System.out.println(wordFactory.createDocument().create());
    }
}



3. Structural Design Patterns
Use Case 1: Adapter Pattern
Scenario: Adapt an old logging system to a new logging interface.




// Old Logging System
class OldLogger {
    public void oldLog(String message) {
        System.out.println("OldLogger: " + message);
    }
}

// New Logger Interface
interface NewLoggerInterface {
    void log(String message);
}

// Adapter
class LoggerAdapter implements NewLoggerInterface {
    private OldLogger oldLogger;

    public LoggerAdapter(OldLogger oldLogger) {
        this.oldLogger = oldLogger;
    }

    @Override
    public void log(String message) {
        oldLogger.oldLog(message);
    }
}

// Usage
public class AdapterPatternExample {
    public static void main(String[] args) {
        OldLogger oldLogger = new OldLogger();
        NewLoggerInterface logger = new LoggerAdapter(oldLogger);
        logger.log("This is a message using the adapter pattern.");
    }
}
Use Case 2: Decorator Pattern
Scenario: Extend the functionality of a basic coffee object with additional features like milk or sugar.





// Component
interface Coffee {
    double cost();
}

// Concrete Component
class BasicCoffee implements Coffee {
    @Override
    public double cost() {
        return 5.0;
    }
}

// Decorator
abstract class CoffeeDecorator implements Coffee {
    protected Coffee coffee;

    public CoffeeDecorator(Coffee coffee) {
        this.coffee = coffee;
    }

    @Override
    public double cost() {
        return coffee.cost();
    }
}

// Concrete Decorators
class MilkDecorator extends CoffeeDecorator {
    public MilkDecorator(Coffee coffee) {
        super(coffee);
    }

    @Override
    public double cost() {
        return super.cost() + 1.0;
    }
}

class SugarDecorator extends CoffeeDecorator {
    public SugarDecorator(Coffee coffee) {
        super(coffee);
    }

    @Override
    public double cost() {
        return super.cost() + 0.5;
    }
}

// Usage
public class DecoratorPatternExample {
    public static void main(String[] args) {
        Coffee coffee = new BasicCoffee();
        System.out.println("Basic coffee cost: $" + coffee.cost());

        Coffee milkCoffee = new MilkDecorator(coffee);
        System.out.println("Coffee with milk cost: $" + milkCoffee.cost());

        Coffee sugarMilkCoffee = new SugarDecorator(milkCoffee);
        System.out.println("Coffee with milk and sugar cost: $" + sugarMilkCoffee.cost());
    }
}